---
apiVersion: v1
kind: Service
metadata:
  name: kafka-backup
  namespace: test
spec:
  selector:
    app: kafka-backup
  ports:
  - name: app
    protocol: TCP
    port: 8080
    targetPort: 8080
    nodePort: 31082
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-backup-db
  namespace: test
spec:
  selector:
    app: kafka-backup-db
  ports:
  - port: 5432
    targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-backup-db
  namespace: test
  labels:
    app: kafka-backup-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-backup-db
  template:
    metadata:
      labels:
        app: kafka-backup-db
    spec:
      initContainers:
      - name: clone-repo
        image: alpine/git:1.0.4
        securityContext:
          runAsUser: 999
        command: ["/bin/sh", "-c", "git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@bitbucket.org/khinkali/kafka_backup_db_test /var/lib/postgresql/data"]
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        env:
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: bitbucket
              key: username
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: bitbucket
              key: password
      containers:
      - name: kafka-backup-db
        image: khinkali/postgres:0.0.2
        env:
        - name: POSTGRES_DB
          value: "backup"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kafka-backup
              key: password
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-data
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-backup
  namespace: test
  labels:
    app: kafka-backup
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-backup
  template:
    metadata:
      labels:
        app: kafka-backup
    spec:
      containers:
      - name: kafka-backup
        image: khinkali/kafka-backup:todo
        env:
        - name: KAFKA_ADDRESS
          value: "kafka:9092"
        - name: VERSION
          value: "todo"
        - name: DB_HOST
          value: "kafka-backup-db"
        - name: DB_PORT
          value: "5432"
        - name: WILDFLY_USER
          valueFrom:
            secretKeyRef:
              name: sink-appserver
              key: username
        - name: WILDFLY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sink-appserver
              key: password
        - name: JNDI_NAME
          value: "java:jboss/jdbc/backup"
        - name: DATASOURCE_NAME
          value: "Kafka-Backup"
        - name: DATABASE_NAME
          value: "backup"
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: kafka-backup
              key: username
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kafka-backup
              key: password
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /kafka-backup/resources/health
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 1